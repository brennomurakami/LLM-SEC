Diretórios e arquivos encontrados:

Pasta: backend
  - backend\projects\IA-ChatBot-main\backend\db.py
  - backend\projects\IA-ChatBot-main\backend\file.py
  - backend\projects\IA-ChatBot-main\backend\funcoes.py
  - backend\projects\IA-ChatBot-main\backend\gpt.py
  - backend\projects\IA-ChatBot-main\backend\routes.py
  - backend\projects\IA-ChatBot-main\backend\user.py

Pasta: script banco
  - backend\projects\IA-ChatBot-main\backend\script banco\banco.sql

Pasta: uploads
  - backend\projects\IA-ChatBot-main\backend\uploads\Bois.pdf
  - backend\projects\IA-ChatBot-main\backend\uploads\Protocolo.pdf
  - backend\projects\IA-ChatBot-main\backend\uploads\Protocolos.pdf


## Resumo do arquivo: `db.py`

**Propósito:**

O arquivo `db.py` é responsável por configurar e inicializar a conexão com o banco de dados MySQL para a aplicação. Ele utiliza a biblioteca `flask_mysqldb` para interagir com o banco de dados e o módulo `dotenv` para carregar as credenciais do banco de dados a partir do arquivo `.env`.

**Funções:**

* **`configure_db(app)`:** Esta função recebe um objeto da aplicação Flask como parâmetro e configura a conexão com o MySQL. Ela define as variáveis de configuração `MYSQL_HOST`, `MYSQL_USER`, `MYSQL_PASSWORD` e `MYSQL_DB` a partir das variáveis de ambiente carregadas do arquivo `.env` e inicializa o objeto `mysql` da aplicação.

**Processos e Lógica:**

1. O arquivo carrega as variáveis de ambiente do arquivo `.env` utilizando a função `load_dotenv()`.
2. A função `configure_db()` define as configurações do MySQL com as variáveis de ambiente carregadas.
3. O objeto `mysql` é inicializado com a aplicação Flask utilizando `mysql.init_app(app)`.

**Dependências:**

* **`flask_mysqldb`:** Biblioteca que facilita a interação com o banco de dados MySQL dentro do contexto do framework Flask.
* **`dotenv`:** Módulo que permite carregar variáveis de ambiente de um arquivo `.env`.
* **`os`:** Módulo do Python para interagir com o sistema operacional, usado para acessar variáveis de ambiente.

**Observações:**

* O arquivo `db.py` é crucial para a comunicação da aplicação com o banco de dados MySQL.
* O uso do arquivo `.env` permite manter as credenciais do banco de dados separadas do código, garantindo maior segurança.
* A função `configure_db()` facilita a configuração da conexão com o banco de dados, tornando o código mais organizado e reutilizável.

-----------------------------------------------------------------------------------
## Resumo Detalhado do Arquivo: `processamento_pdf.py`

### Propósito:

O arquivo `processamento_pdf.py` é responsável por processar arquivos PDF, extrair seu texto e criar um índice de similaridade baseado em embeddings da OpenAI. Esse índice permite a busca por similaridade de textos dentro dos documentos PDF processados.

### Funções:

**1. `limpar_texto(texto)`:** Remove espaços em branco extras de um texto.

**2. `processar_pdf(arquivo)`:** 
    - Lê o arquivo PDF utilizando a biblioteca `PyPDF2`.
    - Extrai o texto de cada página do PDF.
    - Divide o texto extraído em chunks menores (de 1000 caracteres com 300 caracteres de overlap) usando `CharacterTextSplitter`.
    - Retorna a lista de chunks de texto.

**3. `criar_indices_faiss(arquivo)`:**
    - Processa o arquivo PDF e obtém os chunks de texto usando `processar_pdf`.
    - Cria um índice FAISS a partir dos chunks de texto e dos embeddings da OpenAI.
    - Salva o índice FAISS em um arquivo local chamado "faiss_index".
    - Retorna o objeto `vetor_store` que representa o índice FAISS.

**4. `carregar_indices_faiss()`:**
    - Carrega o índice FAISS previamente salvo em "faiss_index".
    - Retorna o objeto `vetor_store` com o índice carregado.

**5. `adicionar_texto_ao_indice(vetor_store, arquivo)`:**
    - Processa o arquivo PDF e obtém os chunks de texto usando `processar_pdf`.
    - Adiciona os novos chunks de texto ao índice FAISS existente.
    - Salva o índice atualizado em "faiss_index".

**6. `verificar_e_atualizar_indice(arquivo)`:**
    - Verifica se o índice FAISS já existe.
    - Se existir, carrega o índice e adiciona os textos do novo arquivo usando `adicionar_texto_ao_indice`.
    - Se não existir, cria um novo índice usando `criar_indices_faiss`.
    - Retorna o objeto `vetor_store` atualizado.

**7. `procurar_similaridade(consulta)`:**
    - Remove o prefixo "VECTOR121:" da consulta.
    - Carrega o índice FAISS.
    - Realiza uma busca por similaridade no índice usando a consulta.
    - Retorna os dois documentos mais similares encontrados, com seus textos limpos e concatenados.

### Processos e Lógica:

O arquivo utiliza as seguintes bibliotecas:

- **`PyPDF2`:** Para ler e extrair texto de arquivos PDF.
- **`langchain.text_splitter`:** Para dividir o texto extraído em chunks.
- **`langchain_community.vectorstores`:** Para criar e gerenciar o índice FAISS.
- **`langchain_openai`:** Para usar os embeddings da OpenAI.
- **`os`:** Para verificar a existência do índice e interagir com o sistema de arquivos.
- **`dotenv`:** Para carregar variáveis de ambiente.

O arquivo funciona com base na seguinte lógica:

1. **Pré-processamento do PDF:** O arquivo PDF é processado para extrair seu texto, que é então dividido em chunks.
2. **Criação do índice FAISS:** Os chunks de texto são convertidos em vetores usando embeddings da OpenAI e armazenados em um índice FAISS.
3. **Busca por similaridade:** Quando uma consulta é fornecida, o arquivo busca similaridade no índice FAISS, retornando os documentos mais semelhantes.

### Dependências:

O arquivo depende das seguintes bibliotecas externas:

- `PyPDF2`
- `langchain`
- `langchain_community`
- `langchain_openai`
- `os`
- `dotenv`

O arquivo também depende de variáveis de ambiente que devem ser definidas em um arquivo `.env`.

### Observações:

O arquivo `processamento_pdf.py` é uma ferramenta útil para indexar e pesquisar em documentos PDF. Ele oferece funcionalidades para processar PDFs, criar um índice de similaridade com embeddings da OpenAI e buscar por similaridade em um texto. 

-----------------------------------------------------------------------------------
## Resumo do arquivo: `backend/db.py`

**Propósito:** O arquivo `backend/db.py`  é responsável por gerenciar a interação com o banco de dados MySQL dentro do sistema. Ele fornece as funções necessárias para executar comandos SQL e retornar os resultados.

**Funções:**

- **`extrair_sql(mensagem)`:** Extrai o código SQL de uma mensagem, identificando-o pelo marcador "SQL121:" e removendo elementos de formatação.
- **`processar_sql(mensagem)`:**  Processa e executa um comando SQL contido em uma mensagem. 
    - Valida se o comando SQL é um comando `SELECT` para garantir que seja seguro para execução.
    - Utiliza a conexão com o banco de dados MySQL (`mysql.connection`) para executar o comando.
    - Formata o resultado da consulta em uma string legível.
    - Retorna o resultado da consulta ou uma mensagem de erro.

**Processos e Lógica:**

1. O arquivo `backend/db.py` assume que a mensagem de entrada contém um código SQL.
2. A função `extrair_sql` separa o código SQL do resto da mensagem.
3. A função `processar_sql` valida se o comando SQL é do tipo `SELECT` para evitar a execução de comandos inseguros como `UPDATE` ou `DELETE`.
4. O código SQL é executado utilizando a conexão com o banco de dados MySQL.
5. O resultado da consulta é formatado para legibilidade e retornado ao usuário.

**Dependências:**

- `backend.db.mysql`: Módulo que fornece a conexão com o banco de dados MySQL.

**Observações:**

- O arquivo assume a existência de uma conexão com o banco de dados MySQL definida no módulo `backend.db.mysql`.
- A segurança do sistema depende da validação do código SQL antes da execução, garantindo que apenas comandos `SELECT` sejam permitidos.
- O arquivo não inclui tratamento de erros detalhado para a execução de comandos SQL.

**Considerações:**

- A validação do código SQL poderia ser aprimorada utilizando bibliotecas dedicadas à validação de SQL.
- O tratamento de erros poderia ser mais robusto, fornecendo informações mais detalhadas sobre os erros ocorridos durante a execução.
- A função `processar_sql` poderia ser melhorada para lidar com diferentes tipos de comandos SQL, como `INSERT`, `UPDATE` e `DELETE`, com os devidos mecanismos de segurança. 

-----------------------------------------------------------------------------------
## Resumo Detalhado do Arquivo `app.py`

**Propósito:**

O arquivo `app.py` serve como ponto de entrada para uma aplicação web Flask que utiliza a API OpenAI para processar solicitações e gerar respostas.

**Funções:**

- **`app = Flask(__name__)`:** Cria uma instância do objeto Flask, inicializando a aplicação web.
- **`client = OpenAI(api_key = os.getenv('OPENAI_API_KEY'))`:**  Inicializa um cliente da API OpenAI utilizando a chave de API armazenada na variável de ambiente `OPENAI_API_KEY`.

**Processos e Lógica:**

O arquivo utiliza o framework Flask para definir rotas e controlar o fluxo da aplicação. A lógica principal do arquivo provavelmente se encontra em outras funções definidas dentro da aplicação Flask, as quais interagem com a API OpenAI para processar solicitações e gerar respostas.

**Dependências:**

- **`flask`:** Framework Python para desenvolvimento web.
- **`render_template`:** Função do Flask para renderizar templates HTML.
- **`request`:** Objeto Flask para acessar dados da requisição HTTP.
- **`jsonify`:** Função Flask para serializar dados em formato JSON.
- **`openai`:** Biblioteca Python para interagir com a API OpenAI.
- **`os`:** Módulo Python para interagir com o sistema operacional, usado para acessar a variável de ambiente `OPENAI_API_KEY`.

**Observações:**

- O código apresentado é apenas uma parte do arquivo `app.py`. O resumo assume que a lógica principal da aplicação se encontra em outras funções definidas dentro da aplicação Flask.
- A variável de ambiente `OPENAI_API_KEY` deve ser definida antes da execução da aplicação, garantindo o acesso à API OpenAI.
- O arquivo provavelmente utiliza outras funções e bibliotecas não listadas aqui, dependendo da funcionalidade específica da aplicação. 

-----------------------------------------------------------------------------------
## Resumo Detalhado do Arquivo `routes.py`

### Propósito

O arquivo `routes.py` define as rotas e as funções de tratamento de requisições para o backend da aplicação, utilizando o framework Flask. Ele gerencia as interações com o usuário, incluindo autenticação, cadastro, gerenciamento de chats, envio e recebimento de mensagens, e upload de arquivos para análise.

### Funções

O arquivo contém diversas funções, cada uma responsável por uma rota específica:

* **`login()`:** Trata as requisições POST para a rota `/login`, validando as credenciais do usuário no banco de dados e efetuando o login.
* **`cadastrar()`:** Trata as requisições POST para a rota `/cadastrar`, validando se o nome de usuário já existe e, se não, inserindo um novo usuário no banco de dados.
* **`cadastro()`:** Renderiza a página HTML de cadastro.
* **`index()`:** Renderiza a página HTML de login.
* **`logout()`:** Trata a rota `/logout`, deslogando o usuário da aplicação.
* **`home()`:** Renderiza a página inicial da aplicação, exibindo a lista de chats do usuário.
* **`get_response(chat_id)`:** Trata as requisições POST para a rota `/get_response/<int:chat_id>`, processando a mensagem do usuário, enviando para o servidor de chat (utilizando a biblioteca `client`) e retornando a resposta.
* **`add_chat()`:** Trata as requisições POST para a rota `/add_chat`, criando um novo chat no banco de dados e retornando o ID do chat.
* **`get_messages(chat_id)`:** Trata as requisições GET para a rota `/get_messages/<int:chat_id>`, buscando as mensagens do chat no banco de dados e retornando como resposta JSON.
* **`delete_chat(chat_id)`:** Trata as requisições POST para a rota `/delete_chat/<int:chat_id>`, deletando o chat e suas mensagens do banco de dados.
* **`update_chat_title(chat_id)`:** Trata as requisições POST para a rota `/update_chat_title/<int:chat_id>`, atualizando o título do chat no banco de dados.
* **`upload_arquivo()`:** Trata as requisições POST para a rota `/upload-arquivo`, recebendo o arquivo enviado pelo usuário, salvando-o na pasta `uploads`, criando e salvando o vectorstore (utilizando a função `verificar_e_atualizar_indice`).


### Processos e Lógica

* **Autenticação:** O arquivo utiliza o Flask-Login para gerenciar a autenticação do usuário. As funções `login` e `logout` são responsáveis por efetuar o login e logout, utilizando o banco de dados para validação das credenciais.
* **Gerenciamento de Chats:** O sistema utiliza o banco de dados para armazenar os chats, suas mensagens e o ID GPT associado a cada um. As funções `add_chat`, `get_messages`, `delete_chat` e `update_chat_title` manipulam as interações com o banco de dados, realizando operações de inserção, leitura, atualização e deleção.
* **Interação com o Chatbot:** A função `get_response` interage com o servidor de chat (utilizando a biblioteca `client`), enviando as mensagens do usuário e recebendo as respostas. Ela implementa lógica para processar comandos especiais da resposta do servidor, como SQL121 (para executar consultas SQL) e VECTOR121 (para buscar similaridade em um vectorstore). 
* **Upload de Arquivos:** A função `upload_arquivo` recebe arquivos enviados pelo usuário, salva na pasta `uploads`, e utiliza a função `verificar_e_atualizar_indice` para criar e salvar o vectorstore.

### Dependências

* **Flask:** Framework web utilizado para a construção da aplicação.
* **Flask-Login:** Extensão para Flask que facilita o gerenciamento de autenticação e login de usuários.
* **MySQL:** Sistema de gerenciamento de banco de dados utilizado para armazenar os dados da aplicação.
* **OpenAI:** Biblioteca utilizada para interagir com o servidor de chat GPT.
* **Os:** Módulo Python que fornece acesso a funcionalidades do sistema operacional, utilizado para manipular arquivos e pastas.
* **backend.file:** Módulo que contém funções para manipulação de arquivos (provavelmente incluindo a função `verificar_e_atualizar_indice`).
* **backend.db:** Módulo que contém a conexão com o banco de dados MySQL.
* **backend.gpt:** Módulo que contém a instância do cliente OpenAI.
* **backend.user:** Módulo que define a classe `Usuario`, responsável por representar um usuário no sistema.
* **backend.funcoes:** Módulo que contém funções auxiliares utilizadas na aplicação.

### Observações

* A função `processar_sql` não está definida no código fornecido, mas é utilizada na função `get_response` para processar consultas SQL.
* A função `procurar_similaridade` também não está definida no código fornecido, mas é utilizada na função `get_response` para buscar similaridade em um vectorstore.
* O código assume que o módulo `client` está configurado para acessar o servidor de chat OpenAI.
* O módulo `backend.file` contém funções para manipulação de arquivos, incluindo a função `verificar_e_atualizar_indice`, que provavelmente é responsável por criar e salvar o vectorstore.

Este resumo detalhado fornece uma visão geral das funcionalidades do arquivo `routes.py` e de como ele se integra com os demais componentes do projeto.  Ele destaca os principais processos e a lógica subjacente à aplicação, bem como as dependências necessárias para seu funcionamento.

-----------------------------------------------------------------------------------
## Resumo Detalhado do Arquivo: `Usuario.py`

### Propósito:

O arquivo `Usuario.py` define a classe `Usuario`, responsável por representar e gerenciar informações sobre usuários no sistema. Ele fornece métodos para:

* Criar objetos `Usuario` com base em dados do banco de dados.
* Acessar informações do usuário, como ID e nome de usuário.
* Obter uma lista de chats associados a um usuário específico.

### Funções:

* **`__init__(self, usuario_id, nome_usuario)`:** Construtor da classe `Usuario`, inicializando atributos `id` e `nome_usuario` com os valores fornecidos.
* **`get(usuario_id)`:** Método estático que busca um usuário no banco de dados usando o `usuario_id` fornecido. Caso encontrado, retorna um objeto `Usuario`; caso contrário, retorna `None`.
* **`obter_chats_usuario()`:** Método estático que retorna uma lista de chats relacionados ao usuário atual (obtido através de `current_user.id`).

### Processos e Lógica:

* A classe `Usuario` estende a classe `UserMixin`, fornecendo métodos essenciais para integração com o sistema de autenticação Flask-Login.
* A função `get` realiza a consulta ao banco de dados (`users`) utilizando a conexão `mysql` do Flask-MySQLDB.
* A função `obter_chats_usuario` também interage com o banco de dados (`chats`) para buscar os chats do usuário atual.

### Dependências:

* **`flask_login`:** Biblioteca usada para gerenciamento de sessões de usuário e autenticação.
* **`backend.db`:** Módulo que contém a configuração e a instância do Flask-MySQLDB, responsável pela conexão com o banco de dados.
* **`mysql`:** Instância do Flask-MySQLDB utilizada para executar consultas SQL no banco de dados.

### Observações:

* O arquivo assume que a tabela `users` no banco de dados possui colunas `id` (chave primária) e `nome_usuario`.
* A tabela `chats` é presumida ter uma coluna `user_id` que faz referência à tabela `users`.
* A função `obter_chats_usuario` usa `current_user.id` para identificar o usuário atual, o que requer a configuração correta do Flask-Login.
* O código demonstra a utilização da conexão com o banco de dados através do cursor, executando consultas SQL e tratando os resultados.

### Conclusão:

O arquivo `Usuario.py` define a representação de um usuário no sistema e fornece métodos para gerenciar dados do usuário e obter informações de seus chats. Ele depende de bibliotecas e módulos específicos para autenticação, conexão com o banco de dados e acesso a informações do usuário. O código demonstra a interação com o banco de dados e o uso de consultas SQL.

-----------------------------------------------------------------------------------
## Resumo Detalhado do Arquivo de Criação do Banco de Dados "empresa_inseminacao.sql"

**Propósito:**
Este arquivo SQL define a estrutura do banco de dados para uma empresa de inseminação artificial, chamado "empresa_inseminacao". Ele cria as tabelas e relações necessárias para armazenar informações sobre endereços, fazendas, vacas, inseminadores, vendedores, vendas, visitas, resultados de inseminação e usuários do sistema.

**Funções:**
O arquivo possui as seguintes funções principais:

* **Criação do Banco de Dados:** Cria o banco de dados "empresa_inseminacao" se ele não existir.
* **Definição de Tabelas:** Define a estrutura de 11 tabelas, incluindo:
    * **endereco:** Armazena informações sobre endereços.
    * **fazendas:** Armazena informações sobre fazendas, incluindo o endereço.
    * **vacas:** Armazena informações sobre as vacas, incluindo fazenda, lote, categoria, ECC, ciclicidade e peso.
    * **inseminadores:** Armazena informações sobre inseminadores.
    * **vendedores:** Armazena informações sobre vendedores.
    * **vendas:** Armazena informações sobre vendas de inseminação, incluindo a fazenda, o vendedor e o valor total.
    * **visitas:** Armazena informações sobre visitas de vendedores a fazendas, incluindo se houve venda.
    * **resultados_inseminacao:** Armazena informações sobre os resultados da inseminação, incluindo a vaca, o touro, o inseminador, a venda, a data da inseminação e o número IATF.
    * **users:** Armazena informações sobre os usuários do sistema, incluindo nome de usuário e senha.
    * **chats:** Armazena informações sobre os chats dos usuários.
    * **messages:** Armazena as mensagens trocadas entre os usuários e o sistema.
* **Definição de Chaves Estrangeiras:** Define as relações entre as tabelas através de chaves estrangeiras, garantindo a integridade referencial do banco de dados.
* **Inserção de Dados:** Insere dados iniciais em todas as tabelas, fornecendo um conjunto de dados inicial para o sistema.

**Processos e Lógica:**
O arquivo define a estrutura do banco de dados de forma sequencial. Primeiro, o banco de dados é criado, depois as tabelas são definidas com seus respectivos campos e tipos de dados, incluindo a definição das chaves primárias e estrangeiras. Por fim, são inseridos dados iniciais em cada tabela.

**Dependências:**
Este arquivo não possui dependências externas, pois ele próprio define a estrutura completa do banco de dados. No entanto, ele depende de um sistema de gerenciamento de banco de dados (SGBD) para ser executado.

**Compreensão:**
Este arquivo é fundamental para entender a estrutura do banco de dados "empresa_inseminacao". Ele fornece informações detalhadas sobre cada tabela, seus campos e as relações entre elas. A inserção de dados iniciais facilita a compreensão de como os dados são armazenados e utilizados no sistema. A análise deste arquivo permite que desenvolvedores compreendam os dados, funcionalidades e integrações do sistema.

-----------------------------------------------------------------------------------
